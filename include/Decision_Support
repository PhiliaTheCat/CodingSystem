#ifndef __INCLUDED_DECISION_SUPPORT__
#define __INCLUDED_DECISION_SUPPORT__

enum class Decision
{
    DECISION_INVALID_DEFAULT,
    DECISION_INVALID_NUMBER_EXCEEDED,

    DECISION_ENCRYPTION,
    DECISION_DECRYPTION,
    DECISION_LOGS,
    DECISION_SETTINGS,
    DECISION_EXIT
};

enum class Decision_Error
{
    DECISION_INVALID_DEFAULT,
    DECISION_INVALID_NUMBER_EXCEEDED
};

inline bool Decision_Is_Valid(Decision &decision)
{
    switch (decision)
    {
    case Decision::DECISION_ENCRYPTION:
    case Decision::DECISION_DECRYPTION:
    case Decision::DECISION_LOGS:
    case Decision::DECISION_SETTINGS:
    case Decision::DECISION_EXIT:
        return true;

    default:
        return false;
    }
}

inline Decision Decision_Update(const int &t)
{
    switch (t)
    {
    case 0:
        return Decision::DECISION_ENCRYPTION;

    case 1:
        return Decision::DECISION_DECRYPTION;

    case 2:
        return Decision::DECISION_LOGS;

    case 3:
        return Decision::DECISION_SETTINGS;

    case 4:
        return Decision::DECISION_EXIT;

    default:
        return Decision::DECISION_INVALID_NUMBER_EXCEEDED;
    }
}

#endif
